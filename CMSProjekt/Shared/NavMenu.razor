@using CMSProjekt.Dialogs;
@using CMSProjekt.dbcontext
@using Microsoft.EntityFrameworkCore;
@inject AppDbContext dbContext
@inject IDialogService dialogService
@inject NavigationManager navManager

<MudCard Style="width:240px" Elevation="3">
    <MudCardContent Style="background-color:var(--mud-palette-primary);min-height:3rem;max-height:3rem;padding:9px 0;text-align:center;">
        <MudText Typo="Typo.h6">
            @pageTitle
        </MudText>
    </MudCardContent>
</MudCard>

<MudNavMenu Color="Color.Primary" Bordered="true" Rounded="true">
    @foreach (var navPage in pages)
    {
        if(dbContext.Pages.Where(a => a.ParentPageId == navPage.Id).Any())
        {
            @if(isAdmin)
            {
                <MudStack Row Spacing="0">
                    <b>
                        <MudNavGroup Title="@navPage.Title" Style="max-width:145px" Expanded="true">
                            @foreach (var childPage in dbContext.Pages.Where(a => a.ParentPageId == navPage.Id))
                            {
                                string childPagePath = "/content/" + childPage.Path;
                                <MudStack Row Spacing="0">
                                    <MudNavLink Href="@childPagePath" Style="min-width:145px"><b>@childPage.Title</b></MudNavLink>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Style="max-height: 45px; max-width: 45px" OnClick="() => ShowEditPage(childPage.Id)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Style="max-height: 45px; max-width: 45px" OnClick="() => ShowDeletePage(childPage.Id)" />
                                </MudStack>
                            }
                        </MudNavGroup>
                    </b>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Style="max-height: 45px; max-width: 45px" OnClick="() => ShowEditPage(navPage.Id)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Style="max-height: 45px; max-width: 45px" OnClick="() => ShowDeletePage(navPage.Id)" />
                </MudStack>
            }
            else
            {
                <b>
                    <MudNavGroup Title="@navPage.Title">
                        @foreach (var childPage in dbContext.Pages.Where(a => a.ParentPageId == navPage.Id))
                        {
                            string childPagePath = "/content/" + childPage.Path;
                            <MudNavLink Href="@childPagePath"><b>@childPage.Title</b></MudNavLink>
                        }
                    </MudNavGroup>
                </b>
            }
        }
        else if(navPage.ParentPageId == -1)
        {
            string pagePath = "/content/" + navPage.Path;
            @if(isAdmin)
            {
                <MudStack Row Spacing="0">
                    <MudNavLink Href="@pagePath" Style="max-width:145px"><b>@navPage.Title</b></MudNavLink>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Style="max-height: 45px; max-width: 45px" OnClick="() => ShowEditPage(navPage.Id)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Style="max-height: 45px; max-width: 45px" OnClick="() => ShowDeletePage(navPage.Id)" />
                </MudStack>
            }
            else
            {
                <MudNavLink Href="@pagePath"><b>@navPage.Title</b></MudNavLink>
            }
        }
    }
    @if(isAdmin)
    {
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" OnClick="ShowAddPageDialog">Dodaj stronę</MudButton>
    }
</MudNavMenu>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private int number = 0;
    private bool collapseNavMenu = true;
    string pageTitle = string.Empty;
    bool isAdmin = false;

    IEnumerable<Models.Page> pages;

    protected override void OnInitialized()
    {
        pages = new List<Models.Page>(dbContext.Pages.Where(a => a.Visible));
    }

    protected async override Task OnInitializedAsync()
    {
        isAdmin = await IsAdminAsync();

        if (isAdmin)
            pages = dbContext.Pages;
        else
            pages = dbContext.Pages.Where(a => a.Visible);

        if (dbContext.Settings.Select(a => a.Name).Contains("pageTitle"))
            pageTitle = dbContext.Settings.Where(a => a.Name == "pageTitle").First().Value;
        else
            pageTitle = string.Empty;
    }

    async Task<bool> IsAdminAsync()
    {
        var authenticationState = await authenticationStateTask;
        if (authenticationState.User.Identity is not null)
            return authenticationState.User.Identity.IsAuthenticated;
        return false;
    }

    private async Task ShowAddPageDialog()
    {
        if(await IsAdminAsync())
        {
            var dialog = await dialogService.ShowAsync<AddPageDialog>("Dodawanie strony");
            var result = await dialog.Result;
            if (!result.Canceled)
                StateHasChanged();
        }
    }

    private async Task ShowEditPage(int id)
    {
        if(await IsAdminAsync())
        {
            var parameters = new DialogParameters<EditPageDialog>();
            parameters.Add("PageId", id);
            var dialog = await dialogService.ShowAsync<EditPageDialog>("Edytowanie strony", parameters);
            var result = await dialog.Result;
            if (!result.Canceled)
                StateHasChanged();
        }
    }

    private async Task ShowDeletePage(int id)
    {
        if(await IsAdminAsync())
        {
            var parameters = new DialogParameters<SimpleAcceptDialog>();
            parameters.Add("ContentText", "Czy na pewno chcesz usunąć tę stronę i jeśli ma podstrony, je również?");
            parameters.Add("AcceptText", "Tak, usuń");
            parameters.Add("CancelText", "Nie, zachowaj");
            var dialog = await dialogService.ShowAsync<SimpleAcceptDialog>("Usuwanie strony", parameters);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                dbContext.Pages.Where(a => a.ParentPageId == id).ExecuteDelete();
                dbContext.Pages.Where(a => a.Id == id).ExecuteDelete();
                dbContext.SaveChanges();
                StateHasChanged();
            }
        }
    }
}
